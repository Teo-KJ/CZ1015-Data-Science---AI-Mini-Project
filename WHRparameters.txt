df_happy = Stocks[['Average','Volume']].values
df_happy = df_happy.reshape(-1, 2)
print(df.shape)

lookback = 50
dataset_train_h = np.array(df_happy[:int(df_happy.shape[0]*0.8)])
dataset_test_h = np.array(df_happy[int(df_happy.shape[0]*0.8)-lookback:])
print(dataset_train.shape)
print(dataset_test.shape)

scaler = MinMaxScaler(feature_range=(0,1))
dataset_train_h = scaler2.fit_transform(dataset_train_h)
dataset_test_h = scaler2.transform(dataset_test_h) 

def create_dataset_2features(df):
    lookback = 50
    x = []
    y = []
    for i in range(lookback, df.shape[0]):
        x.append(df[i-lookback:i, :])
        y.append(df[i, 0])
    x = np.array(x)
    y = np.array(y)
    return x,y

x_train_h, y_train_h = create_dataset_2features(dataset_train_h)
x_test_h, y_test_h = create_dataset_2features(dataset_test_h)

# Reshape features for LSTM Layer
x_train_h = np.reshape(x_train_h, (x_train_h.shape[0], x_train_h.shape[1], 2))
x_test_h = np.reshape(x_test_h, (x_test_h.shape[0], x_test_h.shape[1], 2)) 
print('x_train_h.shape is ' + x_train_h.shape)

model_happy = Sequential()
model_happy.add(LSTM(units=96, return_sequences=True, input_shape=(x_train_h.shape[1], 2)))
model_happy.add(Dropout(0.2))
model_happy.add(LSTM(units=96, return_sequences=True))
model_happy.add(Dropout(0.2))
model_happy.add(LSTM(units=96, return_sequences=True))
model_happy.add(Dropout(0.2))
model_happy.add(LSTM(units=96))
model_happy.add(Dropout(0.2))
model_happy.add(Dense(units=1))

print(model_happy.summary())

model_happy.compile(loss='mean_squared_error', 
              optimizer='adam',
              metrics=['mean_squared_error', 'mean_absolute_error', 'mean_absolute_percentage_error', 'cosine_proximity'])

if(not os.path.exists('stock_prediction.h5')):
    model.fit(x_train, y_train, epochs=50, batch_size=32)
    model.save('stock_prediction.h5')

model = load_model('stock_prediction.h5')